// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
provider = "postgresql"
//provider = "mysql"
  url      = env("DATABASE_URL")
}
model Post {
  id                String     @default(cuid()) @id
  title             String
  slug              String
  content           String?
  published         Boolean @default(false)
  author            User?   @relation(fields: [authorId], references: [id])
  authorId          String?
}
model ServiceCode {
  id                 Int       @id @default(autoincrement())
  code               String    @unique
  description        String?
  icon               String?
  image              String?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  services           Service[]
}

model Service {
  id                 Int      @id @default(autoincrement())
  name               String
  name_slug          String?
  title              String?
  price              Float?  
  description        String?
  discount           Float?  
  image              String?
  icon               String?
  location           String?
  categories         ServiceCategory[]
  tags               ServiceTag[]
  tools              ServiceTool[]
  testimonials       Testimonial[]
  phases             Phase[]
  works              Work[]
  userId             String    
  user               User?   @relation(fields: [userId], references: [id]) 

  codeId              Int?
  code                ServiceCode?     @relation(fields: [codeId], references: [id])
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
}
model Tool {
  id                 Int       @id @default(autoincrement())
  name               String
  slug               String
  description        String?
  image              String?
  icon               String?
  userId             String    
  user               User?   @relation(fields: [userId], references: [id]) 
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  services           ServiceTool[]
}

model ServiceTool {
  serviceId Int
  service   Service @relation(fields: [serviceId], references: [id])
  toolId    Int
  tool      Tool    @relation(fields: [toolId], references: [id])

  @@id([serviceId, toolId])
}


model Category {
  id                 Int               @id @default(autoincrement())
  name               String
  slug               String
  image              String?
  icon               String?
  description        String? 
  services           ServiceCategory[]
  works              WorkCategory[]
  userId             String     // References one specific user (modified)
  user               User?   @relation(fields: [userId], references: [id]) // Relation to User
}

model Tag {
  id                 Int               @id @default(autoincrement())
  name               String
  slug               String
  image              String?
  icon               String?
  description        String? 
  services           ServiceTag[]
  works              WorkTag[]
  userId             String     // References one specific user (modified)
  user               User?   @relation(fields: [userId], references: [id]) // Relation to User
}


model ServiceCategory {
  serviceId          Int
  service            Service   @relation(fields: [serviceId], references: [id])
  categoryId         Int
  category           Category  @relation(fields: [categoryId], references: [id])

  @@id([serviceId, categoryId])
}

model ServiceTag {
  serviceId          Int
  service            Service   @relation(fields: [serviceId], references: [id])
  tagId              Int
  taf                Tag  @relation(fields: [tagId], references: [id])

  @@id([serviceId, tagId])
}

model Customer {
  id                 String         @id @default(cuid())
  name               String
  slug               String
  email              String?         @unique
  image              String?
  testimonials       Testimonial[]
  createdAt          DateTime       @default(now())
  updatedAt          DateTime       @updatedAt
} 

model Testimonial {
  id                 Int       @id @default(autoincrement())
  content            String
  rating             Float     @default(0)
  videoContent       String
  customerId         String
  customer           Customer  @relation(fields: [customerId], references: [id])
  serviceId          Int
  service            Service   @relation(fields: [serviceId], references: [id])
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
}

model Phase {
  id                 Int       @id @default(autoincrement())
  name               String
  description        String?
  image              String?
  icon               String?
  sequence           Int
  serviceId          Int
  service            Service   @relation(fields: [serviceId], references: [id])
  steps              Step[]
  userId             String     // References one specific user (modified)
  user               User   @relation(fields: [userId], references: [id]) // Relation to User
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
}

model Step {
  id                 Int       @id @default(autoincrement())
  name               String
  description        String?
  sequence           Int?
  image              String?
  icon               String?
  phaseId            Int
  phase              Phase     @relation(fields: [phaseId], references: [id])
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
}


model Work {
  id                 Int       @id @default(autoincrement())
  title              String
  description        String?
  imageUrls          String[]  @default([])
  serviceId          Int?
  service            Service?   @relation(fields: [serviceId], references: [id])
  categories         WorkCategory[]
  tags               WorkTag[]
  locationId         Int?
  location           Location? @relation(fields: [locationId], references: [id])
  client             String?   // Client name or organization
  projectDate        DateTime? // Date or period of the project
  projectUrl         String?   // URL or link to more details
  technologies       String?   // Technologies used
  outcome            String?   // Project outcome or results
  additionalImages   String[] // Array of additional image URLs
  highlights         String?   // Key highlights of the project
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  userId             String     // References one specific user (modified)
  user               User   @relation(fields: [userId], references: [id]) // Relation to User
}
model Location {
  id                 Int      @id @default(autoincrement())
  country            String
  city               String?
  image              String?
  works              Work[]
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
}
model WorkCategory {
  workId             Int
  service            Work   @relation(fields: [workId], references: [id])
  categoryId         Int
  category           Category  @relation(fields: [categoryId], references: [id])

  @@id([workId, categoryId])
}

model WorkTag {
  workId             Int
  work               Work   @relation(fields: [workId], references: [id])
  tagId              Int
  tag                Tag  @relation(fields: [tagId], references: [id])

  @@id([workId, tagId])
}


model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}


model Session {
  id                 String   @id @default(cuid())
  sessionToken       String   @unique
  userId             String
  expires            DateTime
  user               User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                 String       @default(cuid()) @id
  user_name          String?
  email              String?   @unique
  password           String
  phone              String
  confirmed_password      String
  createdAt          DateTime  @default(now()) @map(name: "created_at")
  updatedAt          DateTime  @updatedAt @map(name: "updated_at")
  emailVerified      DateTime?
  image              String?
  role               String?
  posts              Post[]
  services           Service[]
  categories         Category[]
  tags               Tag[]
  tools              Tool[]
  phases             Phase[]
  works              Work[]
  @@map(name: "users")
  accounts           Account[]
  sessions           Session[]

}

model VerificationToken {
  identifier        String
  token             String   @unique
  expires           DateTime

  @@unique([identifier, token])
}
